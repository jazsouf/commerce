import { createClient } from "@sanity/client";
import { createGroqBuilder, makeSafeQueryRunner } from 'groqd';

// ðŸ‘‡ Import Sanity types, generated by your Sanity project.
import type * as SanityTypes from "../../../sanity.types.ts";
import { homePageQuery } from "./groqd-queries.ts";

const sanityClient = createClient({
  projectId: 'edrheg39',
  dataset: 'production',
  apiVersion: '2025-06-06',
  useCdn: true,
});

const visualEditingEnabled =
  import.meta.env.PUBLIC_SANITY_VISUAL_EDITING_ENABLED === "true";
const token = import.meta.env.SANITY_API_READ_TOKEN;

// ðŸ‘‡ Create a type-safe query runner
export const runQuery = makeSafeQueryRunner((query, options) => {
  const perspective = visualEditingEnabled ? "drafts" : "published";
  return sanityClient.fetch(query, options, {
      filterResponse: false,
      perspective,
      resultSourceMap: visualEditingEnabled ? "withKeyArraySelector" : false,
      stega: visualEditingEnabled,
      ...(visualEditingEnabled ? { token } : {}),
  })});

// ðŸ‘‡ Create a type-safe query builder
type SchemaConfig = {
  schemaTypes: SanityTypes.AllSanitySchemaTypes
  referenceSymbol: typeof SanityTypes.internalGroqTypeReferenceTo;
};
export const q = createGroqBuilder<SchemaConfig>({});
